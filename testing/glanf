#!/bin/bash

# GLANF project
# Author: Simon Jouet
# Description: Network function virtualization tester

BRIDGE_NAME=ovsbr0

getInterfacePort ()
{
    regex="ofport\s+:\s+([[:digit:]]+)"
    ifinfo=$(sudo ovs-vsctl find interface name=$1)

    [[ $ifinfo =~ $regex ]]

    echo "${BASH_REMATCH[1]}"
}

getHostInterfaceName ()
{
    NSPID=$(docker inspect --format='{{ .State.Pid }}' $1)
    echo v${2}pl${NSPID}
}

clean_ovs()
{
    ovs-vsctl del-br ${BRIDGE_NAME}
    ovs-vsctl add-br ${BRIDGE_NAME}
    ovs-ofctl del-flows ${BRIDGE_NAME}
}

print_usage_and_exit()
{
    echo "Usage: $0"
    echo -e "\tstart <host_image> <middlebox_image1> ..."
    echo -e "\tstop"
    echo -e "\tclean"
    exit 1
}

# Check the privileges
if [ "$(id -u)" != "0" ]; then
    echo "Sorry, you are not root."
    exit 1
fi

if [ "$1" = "start" ]; then
    if [ "$#" -lt 3 ]; then
        print_usage_and_exit
    fi
fi

# Parse the parameters
COMMAND=$1
HOSTIMAGE=$2
MIDDLEBOXIMAGES=${@:3}

case "$COMMAND" in
        start)
            # Initialize OVS
            clean_ovs

            ### Start and configure the source host
            # Start the source docker container
            SOURCEID=$(docker run -itd --cap-add=NET_ADMIN --name="source" $HOSTIMAGE)
            echo "started source $SOURCEID"
            # Inject the interface connected to OVS
            pipework ${BRIDGE_NAME} $SOURCEID 10.0.0.1/8
            HINTFACENAME=$(getHostInterfaceName $SOURCEID eth1)
            SOURCEPORT=$(getInterfacePort $HINTFACENAME)
            PREVIOUSPORT=$SOURCEPORT
            echo "Source Interface [Port] is: $HINTFACENAME [$SOURCEPORT]"
            echo "=============================================================================================="

            ### Start the middleboxes
            for i in ${MIDDLEBOXIMAGES}
            do
                MIDDLEBOXID=$(docker run -itd --cap-add=NET_ADMIN $i)
                echo "started middlebox $MIDDLEBOXID"

                # Attach the two interfaces
                pipework ${BRIDGE_NAME} -i if1 $MIDDLEBOXID 0/0
                pipework ${BRIDGE_NAME} -i if2 $MIDDLEBOXID 0/0

                #
                HOSTINTNAME_1=$(getHostInterfaceName $MIDDLEBOXID if1)
                HOSTINTNAME_2=$(getHostInterfaceName $MIDDLEBOXID if2)
                
                docker exec $MIDDLEBOXID /usr/local/bin/brinit
                docker exec $MIDDLEBOXID /startup_script.sh

                IF1PORT=$(getInterfacePort $HOSTINTNAME_1)
                IF2PORT=$(getInterfacePort $HOSTINTNAME_2)

                echo "Middlebox has interfaces::"
                echo "if1 [port] --> $HOSTINTNAME_1 [$IF1PORT]"
                echo "if2 [port] --> $HOSTINTNAME_2 [$IF2PORT]"
                echo "-----------------------------------------------"

                # Insert the forwarding rules
                ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${PREVIOUSPORT},nw_src=10.0.0.1,dl_type=0x0800,actions=output:${IF1PORT}
                ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${IF1PORT},nw_src=10.0.0.2,dl_type=0x0800,actions=output:${PREVIOUSPORT}
                echo "R1: ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${PREVIOUSPORT},nw_src=10.0.0.1,dl_type=0x0800,actions=output:${IF1PORT}"
                echo "R2: ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${IF1PORT},nw_src=10.0.0.2,dl_type=0x0800,actions=output:${PREVIOUSPORT}"
                echo "=============================================================================================="
                #
                PREVIOUSPORT=$IF2PORT
            done


            ### Start and configure the destionation host
            DESTID=$(docker run -itd --cap-add=NET_ADMIN --name="destination" $HOSTIMAGE)
            echo "started destination $DESTID"
            pipework ${BRIDGE_NAME} $DESTID 10.0.0.2/8
            DESTINTANAME=$(getHostInterfaceName $DESTID eth1)
            DESTPORT=$(getInterfacePort $DESTINTANAME)
            echo "Destination Interface [Port] is: $DESTINTANAME [$DESTPORT]"

            ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${PREVIOUSPORT},nw_src=10.0.0.1,dl_type=0x0800,actions=output:${DESTPORT}
            ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${DESTPORT},nw_src=10.0.0.2,dl_type=0x0800,actions=output:${PREVIOUSPORT}

            # Set default behaviour otherwise
            ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${SOURCEPORT},actions=output:${DESTPORT}
            ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${DESTPORT},actions=output:${SOURCEPORT}

            echo "Destination rules::"
            echo "R1: ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${PREVIOUSPORT},nw_src=10.0.0.1,dl_type=0x0800,actions=output:${DESTPORT}"
            echo "R2: ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${DESTPORT},nw_src=10.0.0.2,dl_type=0x0800,actions=output:${PREVIOUSPORT}"
            echo "R3: ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${SOURCEPORT},actions=output:${DESTPORT}"
            echo "R4: ovs-ofctl add-flow ${BRIDGE_NAME} in_port=${DESTPORT},actions=output:${SOURCEPORT}"
            echo "=============================================================================================="
                

            ;;
        stop)
            docker ps -q | xargs docker stop
            ;;
        clean)
            docker ps -aq | xargs docker rm -f 
            clean_ovs
            ;;
        *)
            print_usage_and_exit
esac
